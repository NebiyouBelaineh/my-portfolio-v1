<?xml version="1.0" encoding="UTF-8"?><rss xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:content="http://purl.org/rss/1.0/modules/content/" xmlns:atom="http://www.w3.org/2005/Atom" version="2.0" xmlns:cc="http://cyber.law.harvard.edu/rss/creativeCommonsRssModule.html">
    <channel>
        <title><![CDATA[Stories by Nebiyouseifu on Medium]]></title>
        <description><![CDATA[Stories by Nebiyouseifu on Medium]]></description>
        <link>https://medium.com/@nebiyouseifu?source=rss-dd963760ca64------2</link>
        <image>
            <url>https://cdn-images-1.medium.com/fit/c/150/150/0*tOWftcTOM3_dJVf6</url>
            <title>Stories by Nebiyouseifu on Medium</title>
            <link>https://medium.com/@nebiyouseifu?source=rss-dd963760ca64------2</link>
        </image>
        <generator>Medium</generator>
        <lastBuildDate>Wed, 11 Sep 2024 07:10:01 GMT</lastBuildDate>
        <atom:link href="https://medium.com/@nebiyouseifu/feed" rel="self" type="application/rss+xml"/>
        <webMaster><![CDATA[yourfriends@medium.com]]></webMaster>
        <atom:link href="http://medium.superfeedr.com" rel="hub"/>
        <item>
            <title><![CDATA[A Culinary Quest: Building a Recipe Finder with Passion and Code]]></title>
            <link>https://nebiyouseifu.medium.com/a-culinary-quest-building-a-recipe-finder-with-passion-and-code-ebec25b462df?source=rss-dd963760ca64------2</link>
            <guid isPermaLink="false">https://medium.com/p/ebec25b462df</guid>
            <category><![CDATA[programming]]></category>
            <category><![CDATA[software-development]]></category>
            <category><![CDATA[recipes-for-cooking]]></category>
            <category><![CDATA[foodies]]></category>
            <category><![CDATA[software-engineering]]></category>
            <dc:creator><![CDATA[Nebiyouseifu]]></dc:creator>
            <pubDate>Wed, 15 May 2024 12:33:06 GMT</pubDate>
            <atom:updated>2024-08-15T23:18:40.731Z</atom:updated>
            <content:encoded><![CDATA[<figure><img alt="" src="https://cdn-images-1.medium.com/max/1024/0*6ZtmXWz_0Jo4UgqS" /></figure><p>Software engineering is a beautiful blend of creativity and logic. As someone who thrives on both, I found myself particularly drawn to the world of web development. This passion fueled my desire to embark on a project for the ALX Software Engineering Foundations program, and what better way to combine love for food and love for code than by building a recipe finder application?</p><p>This blog post chronicles the journey of building this application, alongside my amazing teammate. We both share a deep appreciation for food, cherishing the art of home cooking and the joy of exploring new culinary adventures. For me, cooking isn’t just about sustenance; it’s a form of love, a way to connect with people over shared meals. So, when it came time to brainstorm project ideas, a food-centric application felt like a natural fit. After discovering our mutual love for cooking, we delved into further research, eventually landing on the exciting concept of a recipe finder that caters to users’ preferences.</p><p>We envisioned an application that would empower users to not only discover new recipes but also leverage the ingredients they already have on hand. This meant crafting a user-friendly interface with an intuitive search bar and well-defined filters for cuisine types, dish styles, and meal preferences.</p><p>To bring this vision to life, we divided the responsibilities based on our strengths. I took ownership of the frontend design and implementation, backend routes and API calls, and deployment of the website. Meanwhile, my partner focused on the authentication aspects, other frontend sections, database design, and configuration. Throughout the development process, we maintained open communication, ensuring a seamless integration of our individual efforts into a cohesive final product.</p><p>Our recipe finder caters to users with the following features:</p><ul><li>Discover recipes based on available ingredients.</li><li>Find inspiration by searching for specific dishes, cuisines, or meal types.</li><li>Access recipes on the go with a fully responsive design.</li><li>Bookmark recipes for future reference.</li><li>Export recipes as downloadable PDFs for offline use.</li><li>Learn more about recipes with creator details and nutritional information.</li></ul><h3>The Challenge of Relearning</h3><p>The most significant technical hurdle I faced stemmed from a lack of recent practice with familiar technologies. This resulted in revisiting documentation and refreshing my knowledge. This experience underscored the importance of consistent practice to solidify learned skills and ensure their efficient application. Both my partner and I encountered this challenge, emphasizing the value of breaking down complex tasks into manageable subtasks for focused execution.</p><p>One particularly thorny challenge arose during the front-end development, specifically when working with Bootstrap classes. While I had used them before, the specifics had faded from memory. This resulted in a one-day intensive practice session focused solely on refreshing my knowledge. I meticulously reviewed documentation, experimented with various Bootstrap components, and constructed mock layouts to solidify my understanding. By the end of this focused effort, I was able to construct the basic layouts required for serving pages using Flask. While some hurdles remained, I emerged with a newfound clarity and problem-solving efficiency. This experience underscored the importance of regular practice in retaining technical skills.</p><p>Beyond Bootstrap, the project necessitated revisiting my Javascript and jQuery proficiency. Efficient DOM manipulation was essential for achieving the desired level of interactivity within the front-end. Additionally, I delved deeper into Nginx, specifically focusing on the intricacies of proxying requests seamlessly to the Flask application. These technical hurdles demanded a return to fundamentals, but through focused practice and perseverance, I was able to develop effective solutions. The process not only addressed the immediate challenges but also instilled in me the value of continuous learning and maintaining a sharp technical skillset.</p><h3>Lessons Learned and the Road Ahead</h3><p>Completing this project has ignited a passion for building user-centric applications. I’m brimming with ideas for future features and eager to bring innovative concepts to life. Here are some key takeaways:</p><ul><li><strong>Collaboration via Git:</strong> Working on a large-scale project with Git strengthened my collaborative programming skills.</li><li><strong>Architectural Design:</strong> I gained valuable experience in transforming an idea into a well-structured application, from high-level tasks to granular subtasks, culminating in a functional deployed product.</li><li><strong>Frontend Development:</strong> I honed my ability to construct responsive web applications with mobile-friendly UIs using fundamental front-end technologies.</li><li><strong>API Integration:</strong> I deepened my understanding of making API calls and fetching data to power frontend functionalities.</li><li><strong>Secure Data Storage:</strong> The project emphasized the importance of adhering to industry best practices for secure user data storage.</li><li><strong>DevOps and Deployment:</strong> I delved into the realm of DevOps and deployment, learning how to deploy applications and manage updates efficiently.</li></ul><p>This project provided valuable experience working on a full-stack web application and solidified my understanding of the following:</p><p><strong>Frontend Development:</strong> I honed my ability to construct responsive web applications with mobile-friendly UIs using fundamental frontend technologies:</p><ul><li><strong>HTML5:</strong> Provided the core structure and content of the web pages.</li><li><strong>CSS3:</strong> Styled the webpages for a visually appealing and user-friendly experience.</li><li><strong>JavaScript with jQuery Library:</strong> Added interactivity and manipulated the DOM (Document Object Model) to enhance user experience. We opted to use vanilla Javascript with JQuery instead of a full-fledged Javascript framework like React to solidify our understanding of Javascript fundamentals before diving into more complex frameworks.</li></ul><p><strong>Backend Development:</strong> Collaborating with my partner, I gained experience working on the backend functionalities:</p><ul><li><strong>Flask:</strong> We chose Flask, a lightweight Python web framework, for its simplicity and ease of use. This allowed us to focus on core functionalities within the timeframe of the project which was 2 weeks.</li><li><strong>Python 3:</strong> As both of us had prior experience with Python, it was a natural choice for backend development due to its readability and extensive libraries.</li><li><strong>MySQL:</strong> We utilized MySQL, a popular relational database management system, to store recipe data efficiently.</li></ul><p><strong>API Integration:</strong> The project involved integrating with the <a href="https://www.edamam.com/">Edamame </a>Recipe API to fetch recipe information based on user input. This experience strengthened my understanding of making API calls and using external data sources within web applications.</p><p><strong>DevOps and Deployment:</strong> We deployed the application using Nginx, a web server, and Gunicorn, a WSGI (Web Server Gateway Interface) server gateway. This process involved understanding server configuration and deployment strategies for production environments.</p><p>Looking ahead, I see myself as a full-stack engineer, comfortable working on both frontend and backend aspects of software development.</p><p>Here’s a high-level architecture diagram that depicts the data flow through the application:</p><figure><img alt="" src="https://cdn-images-1.medium.com/max/926/0*FIjxCo7CVTPPtA1g" /></figure><ul><li>The user interacts with the front end using the search bar or filters.</li><li>The frontend sends requests to the Backend based on user input.</li><li>The backend queries the MySQL database for user-specific data (bookmarks) or retrieves recipe information from the <a href="https://www.edamam.com/">Edamam</a>e Recipe API based on search criteria.</li><li>The backend processes the data and sends responses back to the front end.</li><li>The frontend interprets the data and displays it in a user-friendly format.</li></ul><p>In future projects, I aim to:</p><ul><li><strong>Enhance Security:</strong> Implement an SSL certificate and leverage HTTPS for secure communication.</li><li><strong>Embrace React:</strong> Explore building applications with React frameworks to further my understanding.</li><li><strong>Cloud Storage Integration:</strong> Experiment with cloud-based storage solutions like Firebase for data management.</li></ul><h3>A Passion for Building and Problem-Solving</h3><p>This project has been a transformative experience, reigniting my enthusiasm for building things and tackling challenges head-on. My background in Biomedical Engineering honed my meticulousness, logical thinking, and communication skills, all of which translate seamlessly into software development. Now, I’m actively expanding my skillset to create scalable and efficient software solutions.</p><p><strong>I’m a passionate engineer eager to collaborate and solve problems! If you enjoyed this article, feel free to connect with me through the following links:</strong></p><ul><li><strong>Github: </strong><a href="https://github.com/NebiyouBelaineh"><strong>NebiyouBelaineh</strong></a></li><li><strong>Twitter: </strong><a href="https://twitter.com/SeifuNebiyou"><strong>SeifuNebiyou</strong></a></li><li><strong>Project Page:</strong> <a href="https://dishcovery-six.vercel.app/">DishCovery-Home</a></li><li><strong>LinkedIn: </strong><a href="https://www.linkedin.com/in/nebiyou-belaineh-2a683415b/"><strong>Nebiyou Belaineh</strong></a></li></ul><img src="https://medium.com/_/stat?event=post.clientViewed&referrerSource=full_rss&postId=ebec25b462df" width="1" height="1" alt="">]]></content:encoded>
        </item>
        <item>
            <title><![CDATA[What Happens When You Type https://www.google.com in Your Browser and Press Enter?]]></title>
            <link>https://nebiyouseifu.medium.com/what-happens-when-you-type-https-www-google-com-in-your-browser-and-press-enter-6e855ce11fea?source=rss-dd963760ca64------2</link>
            <guid isPermaLink="false">https://medium.com/p/6e855ce11fea</guid>
            <dc:creator><![CDATA[Nebiyouseifu]]></dc:creator>
            <pubDate>Sun, 17 Mar 2024 20:12:24 GMT</pubDate>
            <atom:updated>2024-05-15T11:55:12.747Z</atom:updated>
            <content:encoded><![CDATA[<figure><img alt="" src="https://cdn-images-1.medium.com/max/1024/1*_DbwJ6XXz7-6B2-S1NA77A.jpeg" /><figcaption>Source: Google Images</figcaption></figure><p>Have you ever found yourself using Google daily without pondering what occurs behind the scenes when you type “www.google.com&quot; into your browser and press Enter? Many of us take for granted the underlying technologies involved, from our computer’s web browser to the webpage that loads seamlessly. But let’s dive into the fascinating process unfolding in the background to make it all happen.</p><p>The internet, often thought of as a global network connecting the world comprises various layers of technologies facilitating our daily interactions, whether for education, entertainment, or social purposes. To demystify the term “Internet,” let’s break it down into more digestible components. In this article, I’ll assign a role to each component as follows to clarify their respective purposes.</p><p><strong>1. The Interpreter — DNS request</strong></p><p><strong>2. The Connector — TCP/IP</strong></p><p><strong>3. The Security Guard — Firewall</strong></p><p><strong>4. The Keys — HTTPS/SSL</strong></p><p><strong>5. The Distributor — Load Balancer</strong></p><p><strong>6. The Waiter — Web-Server</strong></p><p><strong>7. The Chef — Application-Server</strong></p><p><strong>8. The Store — Database</strong></p><h4><strong>The Interpreter — DNS Request:</strong></h4><p>Imagine yourself as a traveler in a foreign country where the language is unfamiliar. You enter a restaurant, and your interpreter, fluent in the local language, assists you in ordering food and drinks. Similarly, your computer needs assistance finding the right “address” for Google. It sends a request to a special service called DNS (Domain Name System) to translate “google.com” into an IP address, akin to asking your interpreter to locate the restaurant’s address.</p><figure><img alt="" src="https://cdn-images-1.medium.com/max/522/1*u476_N1Ia4vNIRIbepvS4w.jpeg" /></figure><p>The DNS is considered as the internet’s phonebook. It contains a domain name assigned to an IP Address. To find the corresponding IP Address for a domain name, a DNS resolver is utilized. The DNS resolver looks up the appropriate IP address for the requested domain in various places. It starts out looking for the IP address in your computer’s cache to check if you have previously been to the IP address. If it is not cached, it will use the DNS recursive resolver which is typically run by the internet service provider (ISP) and looks for the IP Address inside the ISP’s server or a third-party DNS service. For this article, the DNS lookup is limited to the ISP’s server.</p><h4>The Connector — TCP/IP:</h4><p>Once the IP address is known, you navigate/connect to the address where Google resides. TCP/IP (Transmission Control Protocol/Internet Protocol) acts as the virtual roads and highways leading to the restaurant. Your computer sends out packets of data along these pathways until it reaches Google’s servers. TCP breaks data into packets, ensuring they reach the destination in order and without errors, while IP handles addressing and routing across the internet.</p><p>As its name indicates, TCP is mainly concerned with the transmission of data. This is done by establishing a three-way handshake. Here’s how it works:</p><figure><img alt="" src="https://cdn-images-1.medium.com/max/1024/1*e-3D95ui-B7XUi7VhyKehQ.png" /><figcaption>TCP 3-way Handshake Illustration. Source: <a href="https://www.cloudflare.com/learning/ddos/glossary/tcp-ip/">Cloudflare</a></figcaption></figure><blockquote><strong><em>SYN (Synchronize):</em></strong></blockquote><blockquote><em>The process starts when your device, usually referred to as the client, initiates a connection by sending a SYN packet to the other device, known as the server.</em></blockquote><blockquote><em>The SYN packet contains certain information, including a sequence number, which helps in identifying and ordering data packets during the connection.</em></blockquote><blockquote><strong><em>SYN-ACK (Synchronize-Acknowledge):</em></strong></blockquote><blockquote><em>Upon receiving the SYN packet, the server responds with a SYN-ACK packet.</em></blockquote><blockquote><em>The SYN-ACK packet acknowledges the receipt of the SYN packet and includes its own sequence number.</em></blockquote><blockquote><em>At this point, the server is indicating its willingness to establish a connection with the client.</em></blockquote><blockquote><strong><em>ACK (Acknowledge):</em></strong></blockquote><blockquote><em>Finally, the client acknowledges the receipt of the SYN-ACK packet by sending an ACK packet to the server.</em></blockquote><blockquote><em>This packet also includes an incremented sequence number.</em></blockquote><blockquote><em>At this stage, both the client and server have exchanged synchronization information, and a reliable connection has been established between them.</em></blockquote><p>After the three-way handshake is complete, data transmission can begin. Both the client and server can now send data packets to each other, and these packets will be acknowledged to ensure reliable communication.</p><h4>The Security Guard — Firewall:</h4><p>Upon arrival at your destination, you encounter a vigilant security guard before entering the restaurant. The guard checks your reservation and ensures you’re not on the blacklist. Similarly, a firewall monitors incoming and outgoing traffic, permitting only authorized requests while keeping out potential threats. It enforces security policies and filters out harmful traffic, safeguarding the network from unauthorized access and cyber threats.</p><h4>The Keys — HTTPS/SSL:</h4><p>Once cleared by the security guard, you need a key to unlock the restaurant door, ensuring secure communication between you and the establishment. Similarly, HTTPS (Hypertext Transfer Protocol Secure) and SSL (Secure Sockets Layer) provide encryption keys, much like the keys to the restaurant door, enabling secure communication with Google. This encryption prevents unauthorized interception and ensures the integrity and confidentiality of your data.</p><p>The encryption is achieved through a series of steps involving cryptographic protocols and certificates. In short, an SSL (Secure Sockets Layer) handshake which is also known as TLS (Transport Layer Security) handshake. This handshake happens after a TCP connection has been opened via a TCP handshake. For sake of brevity, the process of the handshake is not explained in this article. You can follow this <a href="https://www.cloudflare.com/learning/ssl/what-happens-in-a-tls-handshake/">article</a> to get a comprehensive explanation on how the handshake is made and how it works.</p><h4>The Distributor — Load Balancer:</h4><p>Inside the restaurant, a host directs diners to available tables, ensuring efficient service. Similarly, a load balancer distributes incoming requests across multiple servers, maintaining smooth operation, even during peak times. By evenly spreading the workload, it enhances performance and ensures high availability of server resources.</p><h4>The Waiter — Web Server:</h4><p>It’s time to place your order. The web server acts as a waiter, serving up the Google homepage and handling your search queries promptly. Just as a skilled waiter takes your order and delivers your food swiftly, the web server fulfills your browsing requests with efficiency.</p><h4>The Chef — Application Server:</h4><p>Behind the scenes, a team of chefs prepares dishes according to your order. Similarly, the application server processes your search request, retrieves information from Google’s vast database, and serves up search results. It executes the business logic of the web application, interacts with databases, and generates dynamic responses based on the application’s logic.</p><figure><img alt="" src="https://cdn-images-1.medium.com/max/500/1*kM9NSYYfrSrxANA3wUqy3Q.jpeg" /></figure><h4>The Store — Database:</h4><p>Finally, Google’s extensive database is analogous to the restaurant’s storeroom, stocked with ingredients to fulfill your order. The database holds vast amounts of information, including search results and user preferences, ready to be served at a moment’s notice.</p><figure><img alt="" src="https://cdn-images-1.medium.com/max/700/0*7q8goj_0u6EfcXAg.jpeg" /></figure><h4><strong>Summary:</strong></h4><p>In summary, the journey of typing “google.com” and pressing Enter is akin to navigating through a foreign country, finding the right restaurant, ordering your favorite dish, and having it served to you with precision and speed. It’s a captivating blend of technology and teamwork that brings the vast world of information to your fingertips, much like enjoying a delicious meal at your favorite restaurant.</p><p><strong>If you enjoyed this article, feel free to connect with me through the following links:</strong></p><ul><li><strong>Github: </strong><a href="https://github.com/NebiyouBelaineh"><strong>NebiyouBelaineh</strong></a></li><li><strong>Twitter: </strong><a href="https://twitter.com/SeifuNebiyou"><strong>SeifuNebiyou</strong></a></li><li><strong>Project Landing Page:</strong> <a href="http://35.175.65.10/">DishCovery_HomePage</a></li><li><strong>LinkedIn: </strong><a href="https://www.linkedin.com/in/nebiyou-belaineh-2a683415b/"><strong>Nebiyou Belaineh</strong></a></li></ul><img src="https://medium.com/_/stat?event=post.clientViewed&referrerSource=full_rss&postId=6e855ce11fea" width="1" height="1" alt="">]]></content:encoded>
        </item>
    </channel>
</rss>